import gradio as gr
import os
import json
from datetime import datetime



def chat_with_bot(user_query, session_id="default"):
    answer = f"–≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: **{user_query}**"
    sources = "–î–æ–∫—É–º–µ–Ω—Ç 1, –î–æ–∫—É–º–µ–Ω—Ç 2"
    return answer, sources

def clear_chat(session_id="default"):
    pass


css = """
.gradio-container {
    background-color: #1a1a2e !important; 
    max-height: 100vh !important;
    overflow-y: auto;
}

/* Header */
h1, .badge, .header-subtitle {
    color: #e6e6e6 !important;
}

/* Chatbot panel */
#my-chat{
    color: white !important;
    background-color: #16213e !important;
    border: 1px solid #2a3b4d !important;
    border-radius: 8px !important;
    height: 400px !important;
    max-height: 400px !important;
    overflow-y: auto;
}
#my-chat.message {
    color: white !important;
}
/* Message styling */
#my-chat.message.user,
#my-chat.message.bot {
    color: white !important;
    background-color: #0f3460 !important;
    border-radius: 12px !important;
    border: none !important;
    padding: 12px 16px !important;
    box-shadow: none !important;
}

/* Input area */
.input-box {
    background-color: #16213e !important;
    border: 1px solid #2a3b4d !important;
    border-radius: 8px !important;
}

/* Sidebar scroll */
.gr-column:last-child {
    max-height: 500px;
    overflow-y: auto;
}

/* Accordion and sidebar */
.sidebar, .gr-accordion {
    background-color: #16213e !important;
    border: 1px solid #2a3b4d !important;
    border-radius: 8px !important;
}

.gr-accordion .gr-accordion-header {
    background-color: #0f3460 !important;
    color: #ffffff !important;
    border-radius: 6px 6px 0 0 !important;
}

.gr-accordion .gr-accordion-panel {
    background-color: #16213e !important;
    color: #dddddd !important;
    border-radius: 0 0 6px 6px !important;
}

/* Buttons */
button {
    border-radius: 6px !important;
    transition: all 0.3s ease !important;
}

button.primary {
    background-color: #4a6fa5 !important;
    color: white !important;
}

button.primary:hover {
    background-color: #3a5a8a !important;
}

button.secondary {
    background-color: #2a3b4d !important;
    color: white !important;
}

button.secondary:hover {
    background-color: #1a2a3d !important;
}

/* Inputs */
textarea, input[type="text"] {
    background-color: #0f3460 !important;
    color: white !important;
    border: 1px solid #2a3b4d !important;
    border-radius: 6px !important;
    padding: 12px !important;
}

/* Footer text */
.footer-text {
    color: #777777 !important;
    font-size: 0.8em !important;
}
"""


with gr.Blocks(
    theme=gr.themes.Soft(),
    title="ThemisBot - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
    css=css
) as demo:
    with gr.Row():
        with gr.Column(scale=8):
            gr.Markdown(f"""
            <div style="display: flex; align-items: center; gap: 15px; margin-bottom: 10px;">
                <img src="https://i.imgur.com/5L8TbWp.png" width="40"/>
                <div>
                    <h1 style="margin: 0;">ThemisBot</h1>
                    <span class="badge">–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</span>
                </div>
            </div>
            <p class="header-subtitle">
                –ü–æ–ª—É—á–∞–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            </p>
            """)
        with gr.Column(scale=2):
            gr.Markdown(f"""
            <div style="text-align: right; font-size: 0.8em; color: #888;">
                –í–µ—Ä—Å–∏—è 1.0<br>
                {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            </div>
            """)

    with gr.Row():
        with gr.Column(scale=3):
            chatbot = gr.Chatbot(
                elem_id="my-chat",
                label="–ß–∞—Ç —Å ThemisBot",
                height=400,
                show_copy_button=True,
                show_label=False,
                bubble_full_width=False,
                avatar_images=("ü§ñ", "üë§")
            )

            with gr.Row(equal_height=True):
                user_input = gr.Textbox(
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å...",
                    show_label=False,
                    lines=2,
                    max_lines=4,
                    container=False,
                    autofocus=True
                    
                )
                send_button = gr.Button("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", variant="primary", scale=0)

            with gr.Row():
                clear_btn = gr.Button("üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", variant="secondary")
                gr.Markdown("<div class='footer-text' style='text-align: right; flex-grow: 1;'>ThemisBot v1.0</div>")

        with gr.Column(scale=1):
            with gr.Accordion("üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", open=True):
                gr.Markdown("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

            with gr.Accordion("‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", open=False):
                gr.Markdown("""
                **–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:**
                1. –§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ  
                2. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏  
                3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã  

                **–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**  
                - –ö–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –¥–æ–≥–æ–≤–æ—Ä?  
                - –ö–∞–∫–∏–µ –Ω—É–∂–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã?  
                - –ö–∞–∫–∏–µ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–∞–Ω–∏—è?  
                """)

            with gr.Accordion("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", open=False):
                gr.Markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã:**")
                gr.Slider(minimum=1, maximum=5, value=3, label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
                gr.Checkbox(label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", value=True)

    def chat_response(user_query, chat_history):
        answer, sources = chat_with_bot(user_query, session_id="default")
        if sources:
            answer += f"\n\nüîç –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources}"
        chat_history.append((user_query, answer))
        return chat_history, ""

    def clear_chat_history():
        clear_chat(session_id="default")
        return []

 
    send_button.click(
        fn=chat_response,
        inputs=[user_input, chatbot],
        outputs=[chatbot, user_input]
    )

    user_input.submit(
        fn=chat_response,
        inputs=[user_input, chatbot],
        outputs=[chatbot, user_input]
    )

    clear_btn.click(
        fn=clear_chat_history,
        inputs=None,
        outputs=[chatbot]
    )
    

if __name__ == "__main__":
    demo.launch()
