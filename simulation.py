import random
from typing import Dict, List, Any, Optional
from enum import Enum
import json
import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–∏–º—É–ª—è—Ü–∏–∏
class SimulationState(Enum):
    INACTIVE = "inactive"  # –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
    SETUP = "setup"  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
    RUNNING = "running"  # –°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
    FEEDBACK = "feedback"  # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏


class SimulationManager:
    def __init__(self, qa_chain, vectorstore):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–º—É–ª—è—Ü–∏–π.

        Args:
            qa_chain: –¶–µ–ø–æ—á–∫–∞ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –∏–∑ LangChain
            vectorstore: –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        """
        self.qa_chain = qa_chain
        self.vectorstore = vectorstore
        self.simulation_sessions: Dict[str, Dict[str, Any]] = {}

    def start_simulation(self, user_id: str, topic: Optional[str] = None) -> str:
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            topic: –¢–µ–º–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è, –æ—á–∏—â–∞–µ–º –µ–µ
        if user_id in self.simulation_sessions:
            self.end_simulation(user_id)

        # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not topic:
            self.simulation_sessions[user_id] = {
                "state": SimulationState.SETUP,
                "steps": [],
                "current_step": 0,
                "score": 0,
                "feedback": []
            }
            return ("–î–ª—è –Ω–∞—á–∞–ª–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, "
                    "–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Ç—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ', '–∑–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π', '–∂–∏–ª–∏—â–Ω–æ–µ –ø—Ä–∞–≤–æ' –∏ —Ç.–¥.")

        # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        return self._generate_simulation(user_id, topic)

    def _generate_simulation(self, user_id: str, topic: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.

        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            topic: –¢–µ–º–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏

        Returns:
            str: –ü–µ—Ä–≤—ã–π —à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        docs = self.vectorstore.similarity_search(
            f"—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏–º–µ—Ä {topic}", k=3
        )

        context = "\n".join([doc.page_content for doc in docs])

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏
        prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ —Ç–µ–º–µ: {topic}.

        –ö–æ–Ω—Ç–µ–∫—Å—Ç:
        {context}

        –°–æ–∑–¥–∞–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —Å 3-5 —à–∞–≥–∞–º–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è.
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ —É–∫–∞–∂–∏—Ç–µ:
        1. –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
        2. –í–æ–ø—Ä–æ—Å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        3. 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
        4. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º

        –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ JSON, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏:
        {{
          "steps": [
            {{
              "situation": "–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏",
              "question": "–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
              "options": ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–í–∞—Ä–∏–∞–Ω—Ç 3"],
              "correct_answer": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç",
              "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ, –ø–æ—á–µ–º—É —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"
            }},
            ... –∏ —Ç.–¥.
          ]
        }}

        –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ JSON —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞: situation, question, options, correct_answer, explanation.
        –í–µ—Ä–Ω–∏—Ç–µ –¢–û–õ–¨–ö–û JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        """

        try:
            result = self.qa_chain({"question": prompt, "chat_history": []})
            answer = result.get("answer", "")

            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_pattern = r'\{(?:[^{}]|"[^"]*"|\{(?:[^{}]|"[^"]*")*\})*\}'
            json_match = re.search(json_pattern, answer, re.DOTALL)
            if json_match:
                json_str = json_match.group(0)
                # –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                json_str = json_str.replace("'", '"')
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ JSON
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ: {answer}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥
                start_idx = answer.find('{')
                end_idx = answer.rfind('}')
                if start_idx >= 0 and end_idx > start_idx:
                    json_str = answer[start_idx:end_idx + 1]
                    json_str = json_str.replace("'", '"')
                else:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ")

            # –û—á–∏—â–∞–µ–º JSON –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            json_str = re.sub(r'```json\s*|\s*```', '', json_str)
            simulation_data = json.loads(json_str)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if not isinstance(simulation_data, dict) or "steps" not in simulation_data:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–∏")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
            for step in simulation_data["steps"]:
                if "situation" not in step:
                    step["situation"] = "–°–∏—Ç—É–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                if "question" not in step:
                    step["question"] = "–í–æ–ø—Ä–æ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
                if "options" not in step:
                    step["options"] = []
                if "correct_answer" not in step:
                    step["correct_answer"] = "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"
                if "explanation" not in step:
                    step["explanation"] = "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            self.simulation_sessions[user_id] = {
                "state": SimulationState.RUNNING,
                "topic": topic,
                "steps": simulation_data["steps"],
                "current_step": 0,
                "score": 0,
                "feedback": [],
                "start_time": None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ
            }

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏
            return self.get_current_step(user_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ —Ç–µ–º–µ '{topic}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–ª–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–Ω–∞—á–µ."

    def get_current_step(self, user_id: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏.

        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            str: –¢–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        if user_id not in self.simulation_sessions:
            return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /simulation –¥–ª—è –Ω–∞—á–∞–ª–∞."

        session = self.simulation_sessions[user_id]
        if session["state"] != SimulationState.RUNNING:
            return "–°–∏–º—É–ª—è—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /simulation –¥–ª—è –Ω–∞—á–∞–ª–∞."

        current_step = session["current_step"]
        steps = session["steps"]

        if current_step >= len(steps):
            return self.end_simulation(user_id)

        step_data = steps[current_step]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –≤–æ–ø—Ä–æ—Å–æ–º
        message = f"üìù *–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è: {session['topic']}*\n\n"
        message += f"*–®–∞–≥ {current_step + 1}/{len(steps)}*\n\n"
        message += f"{step_data['situation']}\n\n"
        message += f"‚ùì *–í–æ–ø—Ä–æ—Å:* {step_data['question']}\n\n"

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if "options" in step_data and step_data["options"]:
            message += "*–í–∞—Ä–∏–∞–Ω—Ç—ã:*\n"
            for i, option in enumerate(step_data["options"], 1):
                message += f"{i}. {option}\n"

        message += "\n_–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ. –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã, –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–ª–∏ –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç._"

        return message

    def process_answer(self, user_id: str, answer: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π —à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏.

        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            answer: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            str: –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ –æ—Ç–≤–µ—Ç—É –∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        """
        if user_id not in self.simulation_sessions:
            return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /simulation –¥–ª—è –Ω–∞—á–∞–ª–∞."

        session = self.simulation_sessions[user_id]
        if session["state"] != SimulationState.RUNNING:
            return "–°–∏–º—É–ª—è—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /simulation –¥–ª—è –Ω–∞—á–∞–ª–∞."

        current_step = session["current_step"]
        steps = session["steps"]

        if current_step >= len(steps):
            return self.end_simulation(user_id)

        step_data = steps[current_step]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prompt = f"""
        –í —Ä–∞–º–∫–∞—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

        –¢–µ–º–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {session["topic"]}

        –°–∏—Ç—É–∞—Ü–∏—è: {step_data["situation"]}

        –í–æ–ø—Ä–æ—Å: {step_data["question"]}

        –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {step_data["correct_answer"]}

        –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {step_data.get("explanation", "")}

        –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {answer}

        –û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10, –≥–¥–µ:
        - 0-3: –ù–µ–≤–µ—Ä–Ω—ã–π, —Å–æ–¥–µ—Ä–∂–∏—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        - 4-6: –ß–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω—ã–π, –µ—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏
        - 7-10: –í–µ—Ä–Ω—ã–π, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

        –î–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º, —á—Ç–æ –±—ã–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ—á–µ–º—É.
        –¢–∞–∫–∂–µ –¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.

        –í–µ—Ä–Ω–∏—Ç–µ –¢–û–õ–¨–ö–û JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        {{"score": 5, "feedback": "–¢–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"}}

        –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ JSON –≤–∞–ª–∏–¥–Ω—ã–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏.
        """

        try:
            result = self.qa_chain({"question": prompt, "chat_history": []})
            llm_response = result.get("answer", "")

            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_pattern = r'\{(?:[^{}]|"[^"]*")*\}'
            json_match = re.search(json_pattern, llm_response, re.DOTALL)

            if not json_match:
                # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ LLM: {llm_response}")
                score = 5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                feedback = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à –æ—Ç–≤–µ—Ç. " + \
                           f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {step_data['correct_answer']}"
            else:
                try:
                    json_str = json_match.group(0)
                    # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–≤—ã—á–µ–∫
                    json_str = json_str.replace("'", '"')
                    feedback_data = json.loads(json_str)
                    score = int(feedback_data.get("score", 5))
                    feedback = feedback_data.get("feedback", "–û—Ü–µ–Ω–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞.")
                except json.JSONDecodeError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {str(e)}, JSON —Å—Ç—Ä–æ–∫–∞: {json_str}")
                    score = 5
                    feedback = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. " + \
                               f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {step_data['correct_answer']}"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            session["score"] += score
            session["feedback"].append({
                "step": current_step,
                "question": step_data["question"],
                "user_answer": answer,
                "score": score,
                "feedback": feedback
            })

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            message = f"‚úÖ *–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ü–µ–Ω–µ–Ω –Ω–∞ {score}/10 –±–∞–ª–ª–æ–≤*\n\n"
            message += f"*–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:*\n{feedback}\n\n"
            message += f"*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:*\n{step_data['correct_answer']}\n\n"

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            session["current_step"] += 1

            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            if session["current_step"] >= len(steps):
                message += self.end_simulation(user_id)
            else:
                message += "\n" + self.get_current_step(user_id)

            return message

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_simulation –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏."

    def end_simulation(self, user_id: str) -> str:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É.

        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            str: –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        if user_id not in self.simulation_sessions:
            return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏."

        session = self.simulation_sessions[user_id]
        total_steps = len(session["steps"])

        if not total_steps:
            del self.simulation_sessions[user_id]
            return "–°–∏–º—É–ª—è—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        max_possible_score = total_steps * 10
        total_score = session["score"]
        percentage = (total_score / max_possible_score) * 100 if max_possible_score > 0 else 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
        if percentage >= 90:
            overall_rating = "–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–∫–∞–∑–∞–ª–∏ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤."
        elif percentage >= 75:
            overall_rating = "–•–æ—Ä–æ—à–æ! –í—ã –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —Ö–æ—Ä–æ—à–µ–µ –∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–≤—ã—Ö –Ω–æ—Ä–º."
        elif percentage >= 60:
            overall_rating = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. –ï—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤."
        else:
            overall_rating = "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ."

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üèÅ *–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {session.get('topic', '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è')}*\n\n"
        message += f"*–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª:* {total_score}/{max_possible_score} ({percentage:.1f}%)\n\n"
        message += f"*–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:* {overall_rating}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —à–∞–≥—É
        message += "*–î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:*\n\n"
        for i, feedback in enumerate(session.get("feedback", []), 1):
            message += f"*–®–∞–≥ {i}:* {feedback.get('score', 0)}/10 - {feedback.get('question', '–í–æ–ø—Ä–æ—Å')}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        try:
            topic = session.get("topic", "—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
            prompt = f"""
            –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ —Ç–µ–º–µ '{topic}' —Å –æ–±—â–∏–º –±–∞–ª–ª–æ–º {percentage:.1f}%, 
            –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏. 
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–∫—Ç–æ–≤ 
            –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
            """

            result = self.qa_chain({"question": prompt, "chat_history": []})
            recommendations = result.get("answer", "")

            message += f"\n*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n{recommendations}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
            message += "\n*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:* –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."

        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        del self.simulation_sessions[user_id]

        return message

    def is_in_simulation(self, user_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏–º—É–ª—è—Ü–∏–∏.

        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏–º—É–ª—è—Ü–∏–∏, –∏–Ω–∞—á–µ False
        """
        return user_id in self.simulation_sessions

    def get_simulation_state(self, user_id: str) -> Optional[SimulationState]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            SimulationState: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–ª–∏ None, –µ—Å–ª–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–µ—Ç
        """
        if user_id not in self.simulation_sessions:
            return None
        return self.simulation_sessions[user_id]["state"]